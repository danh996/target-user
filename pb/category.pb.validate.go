// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/category.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Category with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Category) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Category with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoryMultiError, or nil
// if none found.
func (m *Category) ValidateAll() error {
	return m.validate(true)
}

func (m *Category) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Slug

	// no validation rules for Created

	// no validation rules for Updated

	if len(errors) > 0 {
		return CategoryMultiError(errors)
	}
	return nil
}

// CategoryMultiError is an error wrapping multiple validation errors returned
// by Category.ValidateAll() if the designated constraints aren't met.
type CategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryMultiError) AllErrors() []error { return m }

// CategoryValidationError is the validation error returned by
// Category.Validate if the designated constraints aren't met.
type CategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryValidationError) ErrorName() string { return "CategoryValidationError" }

// Error satisfies the builtin error interface
func (e CategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryValidationError{}

// Validate checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryRequestMultiError, or nil if none found.
func (m *CreateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateCategoryRequestMultiError(errors)
	}
	return nil
}

// CreateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateCategoryRequestValidationError is the validation error returned by
// CreateCategoryRequest.Validate if the designated constraints aren't met.
type CreateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryRequestValidationError) ErrorName() string {
	return "CreateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryRequestValidationError{}

// Validate checks the field values on CreateCategoryReponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCategoryReponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCategoryReponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCategoryReponseMultiError, or nil if none found.
func (m *CreateCategoryReponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCategoryReponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCategoryReponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCategoryReponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCategoryReponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCategoryReponseMultiError(errors)
	}
	return nil
}

// CreateCategoryReponseMultiError is an error wrapping multiple validation
// errors returned by CreateCategoryReponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCategoryReponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCategoryReponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCategoryReponseMultiError) AllErrors() []error { return m }

// CreateCategoryReponseValidationError is the validation error returned by
// CreateCategoryReponse.Validate if the designated constraints aren't met.
type CreateCategoryReponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCategoryReponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCategoryReponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCategoryReponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCategoryReponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCategoryReponseValidationError) ErrorName() string {
	return "CreateCategoryReponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCategoryReponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCategoryReponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCategoryReponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCategoryReponseValidationError{}

// Validate checks the field values on GetCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoriesRequestMultiError, or nil if none found.
func (m *GetCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCategoriesRequestMultiError(errors)
	}
	return nil
}

// GetCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by GetCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoriesRequestMultiError) AllErrors() []error { return m }

// GetCategoriesRequestValidationError is the validation error returned by
// GetCategoriesRequest.Validate if the designated constraints aren't met.
type GetCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoriesRequestValidationError) ErrorName() string {
	return "GetCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoriesRequestValidationError{}

// Validate checks the field values on GetCategoriesReponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoriesReponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoriesReponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoriesReponseMultiError, or nil if none found.
func (m *GetCategoriesReponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoriesReponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategory() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCategoriesReponseValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCategoriesReponseValidationError{
						field:  fmt.Sprintf("Category[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCategoriesReponseValidationError{
					field:  fmt.Sprintf("Category[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCategoriesReponseMultiError(errors)
	}
	return nil
}

// GetCategoriesReponseMultiError is an error wrapping multiple validation
// errors returned by GetCategoriesReponse.ValidateAll() if the designated
// constraints aren't met.
type GetCategoriesReponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoriesReponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoriesReponseMultiError) AllErrors() []error { return m }

// GetCategoriesReponseValidationError is the validation error returned by
// GetCategoriesReponse.Validate if the designated constraints aren't met.
type GetCategoriesReponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoriesReponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoriesReponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoriesReponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoriesReponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoriesReponseValidationError) ErrorName() string {
	return "GetCategoriesReponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoriesReponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoriesReponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoriesReponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoriesReponseValidationError{}

// Validate checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryRequestMultiError, or nil if none found.
func (m *GetCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return GetCategoryRequestMultiError(errors)
	}
	return nil
}

// GetCategoryRequestMultiError is an error wrapping multiple validation errors
// returned by GetCategoryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryRequestMultiError) AllErrors() []error { return m }

// GetCategoryRequestValidationError is the validation error returned by
// GetCategoryRequest.Validate if the designated constraints aren't met.
type GetCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryRequestValidationError) ErrorName() string {
	return "GetCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryRequestValidationError{}

// Validate checks the field values on GetCategoryReponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCategoryReponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCategoryReponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCategoryReponseMultiError, or nil if none found.
func (m *GetCategoryReponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCategoryReponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCategoryReponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCategoryReponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCategoryReponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCategoryReponseMultiError(errors)
	}
	return nil
}

// GetCategoryReponseMultiError is an error wrapping multiple validation errors
// returned by GetCategoryReponse.ValidateAll() if the designated constraints
// aren't met.
type GetCategoryReponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCategoryReponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCategoryReponseMultiError) AllErrors() []error { return m }

// GetCategoryReponseValidationError is the validation error returned by
// GetCategoryReponse.Validate if the designated constraints aren't met.
type GetCategoryReponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCategoryReponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCategoryReponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCategoryReponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCategoryReponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCategoryReponseValidationError) ErrorName() string {
	return "GetCategoryReponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCategoryReponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCategoryReponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCategoryReponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCategoryReponseValidationError{}

// Validate checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryRequestMultiError, or nil if none found.
func (m *UpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return UpdateCategoryRequestMultiError(errors)
	}
	return nil
}

// UpdateCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryRequestMultiError) AllErrors() []error { return m }

// UpdateCategoryRequestValidationError is the validation error returned by
// UpdateCategoryRequest.Validate if the designated constraints aren't met.
type UpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryRequestValidationError) ErrorName() string {
	return "UpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryRequestValidationError{}

// Validate checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCategoryResponseMultiError, or nil if none found.
func (m *UpdateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return UpdateCategoryResponseMultiError(errors)
	}
	return nil
}

// UpdateCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCategoryResponseMultiError) AllErrors() []error { return m }

// UpdateCategoryResponseValidationError is the validation error returned by
// UpdateCategoryResponse.Validate if the designated constraints aren't met.
type UpdateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCategoryResponseValidationError) ErrorName() string {
	return "UpdateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCategoryResponseValidationError{}

// Validate checks the field values on DeleteCategoryReponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryReponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryReponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryReponseMultiError, or nil if none found.
func (m *DeleteCategoryReponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryReponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return DeleteCategoryReponseMultiError(errors)
	}
	return nil
}

// DeleteCategoryReponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryReponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryReponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryReponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryReponseMultiError) AllErrors() []error { return m }

// DeleteCategoryReponseValidationError is the validation error returned by
// DeleteCategoryReponse.Validate if the designated constraints aren't met.
type DeleteCategoryReponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryReponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryReponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryReponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryReponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryReponseValidationError) ErrorName() string {
	return "DeleteCategoryReponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryReponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryReponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryReponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryReponseValidationError{}
