// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/auth.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterCustomerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterCustomerRequestMultiError, or nil if none found.
func (m *RegisterCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetFullname()); l < 6 || l > 20 {
		err := RegisterCustomerRequestValidationError{
			field:  "Fullname",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RegisterCustomerRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 20 {
		err := RegisterCustomerRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterCustomerRequestMultiError(errors)
	}
	return nil
}

func (m *RegisterCustomerRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RegisterCustomerRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RegisterCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterCustomerRequestMultiError) AllErrors() []error { return m }

// RegisterCustomerRequestValidationError is the validation error returned by
// RegisterCustomerRequest.Validate if the designated constraints aren't met.
type RegisterCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterCustomerRequestValidationError) ErrorName() string {
	return "RegisterCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterCustomerRequestValidationError{}

// Validate checks the field values on RegisterCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterCustomerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterCustomerResponseMultiError, or nil if none found.
func (m *RegisterCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterCustomerResponseMultiError(errors)
	}
	return nil
}

// RegisterCustomerResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterCustomerResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterCustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterCustomerResponseMultiError) AllErrors() []error { return m }

// RegisterCustomerResponseValidationError is the validation error returned by
// RegisterCustomerResponse.Validate if the designated constraints aren't met.
type RegisterCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterCustomerResponseValidationError) ErrorName() string {
	return "RegisterCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterCustomerResponseValidationError{}

// Validate checks the field values on LoginCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginCustomerRequestMultiError, or nil if none found.
func (m *LoginCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetEmail()); l < 6 || l > 20 {
		err := LoginCustomerRequestValidationError{
			field:  "Email",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 20 {
		err := LoginCustomerRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginCustomerRequestMultiError(errors)
	}
	return nil
}

// LoginCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by LoginCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type LoginCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginCustomerRequestMultiError) AllErrors() []error { return m }

// LoginCustomerRequestValidationError is the validation error returned by
// LoginCustomerRequest.Validate if the designated constraints aren't met.
type LoginCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginCustomerRequestValidationError) ErrorName() string {
	return "LoginCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LoginCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginCustomerRequestValidationError{}

// Validate checks the field values on LoginCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginCustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginCustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginCustomerResponseMultiError, or nil if none found.
func (m *LoginCustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginCustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Fullname

	// no validation rules for Email

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginCustomerResponseMultiError(errors)
	}
	return nil
}

// LoginCustomerResponseMultiError is an error wrapping multiple validation
// errors returned by LoginCustomerResponse.ValidateAll() if the designated
// constraints aren't met.
type LoginCustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginCustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginCustomerResponseMultiError) AllErrors() []error { return m }

// LoginCustomerResponseValidationError is the validation error returned by
// LoginCustomerResponse.Validate if the designated constraints aren't met.
type LoginCustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginCustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginCustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginCustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginCustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginCustomerResponseValidationError) ErrorName() string {
	return "LoginCustomerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LoginCustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginCustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginCustomerResponseValidationError{}

// Validate checks the field values on ForgotPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgotPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgotPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgotPasswordRequestMultiError, or nil if none found.
func (m *ForgotPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgotPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
		err := ForgotPasswordRequestValidationError{
			field:  "Phone",
			reason: "value length must be between 10 and 11 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ForgotPasswordRequestMultiError(errors)
	}
	return nil
}

// ForgotPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ForgotPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ForgotPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgotPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgotPasswordRequestMultiError) AllErrors() []error { return m }

// ForgotPasswordRequestValidationError is the validation error returned by
// ForgotPasswordRequest.Validate if the designated constraints aren't met.
type ForgotPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgotPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgotPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgotPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgotPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgotPasswordRequestValidationError) ErrorName() string {
	return "ForgotPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForgotPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgotPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgotPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgotPasswordRequestValidationError{}

// Validate checks the field values on ForgotPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgotPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgotPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgotPasswordResponseMultiError, or nil if none found.
func (m *ForgotPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgotPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ForgotPasswordResponseMultiError(errors)
	}
	return nil
}

// ForgotPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ForgotPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ForgotPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgotPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgotPasswordResponseMultiError) AllErrors() []error { return m }

// ForgotPasswordResponseValidationError is the validation error returned by
// ForgotPasswordResponse.Validate if the designated constraints aren't met.
type ForgotPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgotPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgotPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgotPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgotPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgotPasswordResponseValidationError) ErrorName() string {
	return "ForgotPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForgotPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgotPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgotPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgotPasswordResponseValidationError{}

// Validate checks the field values on VerifyOTPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyOTPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyOTPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyOTPRequestMultiError, or nil if none found.
func (m *VerifyOTPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyOTPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
		err := VerifyOTPRequestValidationError{
			field:  "Phone",
			reason: "value length must be between 10 and 11 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Otp

	if len(errors) > 0 {
		return VerifyOTPRequestMultiError(errors)
	}
	return nil
}

// VerifyOTPRequestMultiError is an error wrapping multiple validation errors
// returned by VerifyOTPRequest.ValidateAll() if the designated constraints
// aren't met.
type VerifyOTPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyOTPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyOTPRequestMultiError) AllErrors() []error { return m }

// VerifyOTPRequestValidationError is the validation error returned by
// VerifyOTPRequest.Validate if the designated constraints aren't met.
type VerifyOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOTPRequestValidationError) ErrorName() string { return "VerifyOTPRequestValidationError" }

// Error satisfies the builtin error interface
func (e VerifyOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOTPRequestValidationError{}

// Validate checks the field values on VerifyOTPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyOTPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyOTPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyOTPResponseMultiError, or nil if none found.
func (m *VerifyOTPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyOTPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyOTPResponseMultiError(errors)
	}
	return nil
}

// VerifyOTPResponseMultiError is an error wrapping multiple validation errors
// returned by VerifyOTPResponse.ValidateAll() if the designated constraints
// aren't met.
type VerifyOTPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyOTPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyOTPResponseMultiError) AllErrors() []error { return m }

// VerifyOTPResponseValidationError is the validation error returned by
// VerifyOTPResponse.Validate if the designated constraints aren't met.
type VerifyOTPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyOTPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyOTPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyOTPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyOTPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyOTPResponseValidationError) ErrorName() string {
	return "VerifyOTPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyOTPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyOTPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyOTPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyOTPResponseValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
		err := ResetPasswordRequestValidationError{
			field:  "Phone",
			reason: "value length must be between 10 and 11 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Token

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 6 || l > 20 {
		err := ResetPasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}
	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordResponseMultiError, or nil if none found.
func (m *ResetPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPasswordResponseMultiError(errors)
	}
	return nil
}

// ResetPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordResponseMultiError) AllErrors() []error { return m }

// ResetPasswordResponseValidationError is the validation error returned by
// ResetPasswordResponse.Validate if the designated constraints aren't met.
type ResetPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordResponseValidationError) ErrorName() string {
	return "ResetPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordResponseValidationError{}

// Validate checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRequestMultiError, or nil if none found.
func (m *ChangePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
		err := ChangePasswordRequestValidationError{
			field:  "Phone",
			reason: "value length must be between 10 and 11 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 6 || l > 20 {
		err := ChangePasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNewPassword()); l < 6 || l > 20 {
		err := ChangePasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be between 6 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangePasswordRequestMultiError(errors)
	}
	return nil
}

// ChangePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRequestMultiError) AllErrors() []error { return m }

// ChangePasswordRequestValidationError is the validation error returned by
// ChangePasswordRequest.Validate if the designated constraints aren't met.
type ChangePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRequestValidationError) ErrorName() string {
	return "ChangePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRequestValidationError{}

// Validate checks the field values on ChangePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordResponseMultiError, or nil if none found.
func (m *ChangePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangePasswordResponseMultiError(errors)
	}
	return nil
}

// ChangePasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordResponseMultiError) AllErrors() []error { return m }

// ChangePasswordResponseValidationError is the validation error returned by
// ChangePasswordResponse.Validate if the designated constraints aren't met.
type ChangePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordResponseValidationError) ErrorName() string {
	return "ChangePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordResponseValidationError{}
